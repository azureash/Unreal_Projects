{\rtf1\ansi\ansicpg1252\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\b\f0\fs30\lang22 Setting World Camera Basics -\par
\b0\fs22 1 - On the map, select Actor -> CameraActor;\par
2 - Select Blueprints tabe -> Open Level Blueprint;\par
3 - Set the functions:\par
\tab 3.1 - Event BeginPlay linked to Set View Target with Blend;\par
\tab 3.2 - Set View Target with Blend will receive all the conectors;\par
\tab 3.3 - Select the camera object on the level, go back to the blueprint, right-click and create reference to CameraActor;\par
\tab 3.4 - Connect CameraActor to Set View Target with Blend on the New View Target option;\par
\tab 3.5 - Call Get Player Controller function and link it to the Target option on Set View Target with Blend;\par
4 - Compile and Run;\par
\par
\b\fs30 Binding Control Keys/Player Movement -\par
\b0\fs22 1 - On the map, select Project Settings;\par
2 - Go to Engine -> Input;\par
3 - Types of Actions:\par
\tab 3.1 - Action Mappings - used for single press events, like interaction with objects or jumping;\par
\tab 3.2 - Axis Mappins - used for binding movement keys, or actions that you need to hold the key;\par
4 - After defining the bindings, go to the Player's blueprint;\par
5 - set the functions:\par
\tab 5.1 - Create a new event graph and call it input;\par
\tab 5.2 - Call the Event functions named after the key bindings;\par
\tab 5.3 - Call Add Movement Input function;\par
\tab 5.4 - Link the Event functions to the Add Movement Input function\par
\tab 5.5 - Link Axis Value from the Event function to the Scale Value from the Movement Input function, now it will move the Player only when pressed that key bind.\par
6 - To make the player move follow the cursor you will need:\par
\tab 6.1 - \b Event Tick\b0  function so the game keeps updating position.\par
\tab 6.2 - Drag and drop the capsule object from your player base into the blueprint.\par
\tab 6.3 - \b Set World Rotation \b0 function, the target is \b Player Capsule\b0 ; white arrow is \b Event Tick\b0 ; rotation on  X and Y is \b Get Action Rotation\b0  function; rotation Z is \b Find Look At Rotation \b0 function.\par
\tab 6.4 - \b Get Actor Rotation \b0 function, X and Y axis linked to \b World Rotation \b0 function.\par
\tab 6.5 - \b Find Look At Rotation \b0 function, Z axis linked to \b World Rotation \b0 function; Start linked to \b Get Actor Location \b0 function; Taget linked to \b Break Hit Result \b0 function.\par
\tab 6.6 - \b Get Actor Location \b0 function, Return Value linked to Start on \b Find Look At Rotation\b0  function.\par
\tab 6.7 - \b Break Hit Result \b0 function, location option linked to Target in \b Find Look At Rotation \b0 function; Hit linked to Hit Result in \b Get Hit Result Under Cursor by Channel \b0 function.\par
\tab 6.8 - \b Get Hit Result Under Cursor by Channel \b0 function, Hit Result linked to Hit in \b Break Hit Result \b0 function; Target linked to \b Get Player Controller \b0 function.\par
\tab 6.9 - \b Get Player Controller \b0 function, Return Value linked to Target in \b Get Hit Result Under Cursor by Channel \b0 function.\par
\par
\b\fs30 Project Settings - \par
\b0\fs22 1 - On Project Settings set:\par
\tab 1.1 - The Default Game Mode to be your BaseGameMode blueprint;\par
\tab 1.2 - The Default Pawn Class to be the player's blueprint;\par
\par
\b\fs30 Geometry and Meshes-\par
\b0\fs22 1 - Sumary:\par
\tab Geometry can be used to make level assets or to cut and model level assets.\par
\tab For a mesh to collide (i.e. for a bullet to be destroyed on hit) the collision component (box, capsule or sphere) must be a son of the mesh itself. If nothing works, try having a invisible mesh for collision and use another mesh inside it with the collision component (far from ideal, but it just works).\par
2 - Instructions:\par
\tab 2.1 - Geometries are used as parts of the World/Levels themselves (like floor and walls), different from meshes/static meshes that are used as accessories for the world (like tables and trees). By default static meshes does not have collision but it can be added as follows:\par
\tab 2.1.1 - Select the meshe;\par
\tab 2.1.2 - Double click on the static mesh metrial icon;\par
\tab 2.1.3 - Edit collision on the new tab by setting a sphere, box or capsule collsion;\b\fs30\par
\par
Setting Blueprints - \par
\b0\fs22 1 - Push the content drawer (Ctrl + Spacebar)\par
2 - Name it following the pattern BP_something.\par
3 - Double click and start adding Components like meshes to make it visible.\par
4 - Go to the Event graph tab and edit the methods that will be executed by the Actor.\par
\par
\b\fs30 Enemy Health System -\par
\b0\fs22 1 - Create a Blueprint Interface for enemy Damage:\par
\tab 1.1 - Go to content browser, add, blueprint, blueprint interface;\par
2 - Add function name HitEnemy;\par
3 - Add to enemy BP the created interface's function;\par
4 - Add health and max health variable, set their values as you wish;\par
5 - Add Input to your Blueprint Interface;\par
6 - Add logic to enemy actor:\par
\tab 6.1 - Call the Event Hit Enemy from the Interface you Created by clicking in Class Settings and adding the interface via the menu on the left;\par
\tab 6.2 - Call Get Health;\par
\tab 6.3 - Decrement Health from the Event Hit Enemy;\par
\tab 6.4 - Set Health as result;\par
\tab 6.5 - Call Branch Function and <= operation and link Set Health to both;\par
\tab 6.6 - Call Destroy Actor Function and link True from Branch to it;\par
7 - Add logic to player's bullet:\par
\tab 7.1 - Call Event Hit function;\par
\tab 7.2 - Call Sequence function and link Event Hit to it;\par
\tab 7.3 - Call Destroy Actor function and link Sequence function to it (this link will destroy bullets on hitting anything);\par
\tab 7.4 - Call Does Implement Interface function, select the Interface created, link Other from Event Hit to it;\par
\tab 7.5 - Call Branch and add Return Value from Does Implement Interface function to it, link Sequence to this Branch;\par
\tab 7.6 - Call hit enemy function from interface created and link it to Branch;\par
\tab 7.7 - Create "Damage" variable, set a value to it and link it to Hit Enemy function;\par
\b\fs30\par
Enemy Spawn System:\par
\b0\fs22 1 - Create a new actor Blueprint;\par
2 - Go to the Game Mode Blueprint that you are using and create 2 variables and 2 custom events:\par
\tab 2.1 - Variable Enemies Alive and Variable Max Enemies;\par
\tab 2.2 - Custom Event Spawn Enemies, which will increment the Enemies Alive variable;\par
\tab 2.3 - Custom Event Kill Enemis, which will decrement the Enemis Alive variable;\par
3 - Back to the Enemy Spawn Blueptrint, write the logic for the enemy spawn:\par
\tab 3.1 - Create custom Event Spawn Enemy;\par
\tab 3.2 - Call function Spawn Actor and link to Spawn Enemy Event, also link the class and spawn transform from Spawn Actor Function;\par
\tab 3.3 - Create a For Loop between Event Spawn Enemy and Spawn Actor Function, decrement  the Last Index from the For Loop to the Event Spawn Enemy new variable called Number of Enemies;\par
\tab 3.4 - Call Delay Function and link it to the Completed fro mthe For Loop, the Duration will be a new variable called Spawn Delay;\par
\tab 3.5 - Call a Branch Function and link it to the Completed from the Delay Function, the True link from the Branch will call the Event Spawn Enemy. Fill the Enemy, Location and Number of Enemies variables.\par
\tab 3.6 - The False link from the Branch will call the Should Spawn fucntion (see ahead).\par
\tab 3.7 - The Condition from the Branch will happen when the Max Enemies is less then the Enemies Alive;\par
4 - Spawn First Enemy logic:\par
\tab 4.1 - Call Event Begin Play;\par
\tab 4.2 - Call Sequence function, the then 0 being linked to the Event Spawn Enemy Function, set it's variables (Enemy, location, Number of Enemies);\par
\tab 4.3 - Then 1 from the Sequence will be linked to a Casto to Game Mode being used, the object link will be the Get Game Mode Return Value and Set the As Game Mode Base as variable ( this variable will be called on the Condidition from the branch of section 3);\par
5 - Loop for Spawn Conuter:\par
\tab 5.1 - Create Custom Event Should Spawn?;\par
\tab 5.2 - Call Delay function, the durantion will be the Spawn Delay;\par
\tab 5.3 - Call a Branch Function, the Condition will be the same as section 3;\par
\tab 5.4 - If True From the Branch will call the Event Spawn Enamy Function, using the same variables as Location, Enemy and Number of Enemies;\par
\tab 5.5 - If False from ther Branch will call Should Spawn? Function;\b\fs30\par
\par
Enemy and Player Bullets:\par
\b0\fs22 (Section was extracted from Unreal Forums, editing pending).\par
To start you need to create a projectile actor: right click components window, select blueprint, then select actor in the new window. Next add a mesh that has collision and add a projectile movement component. You could also make your own movement method if you were so inclined. Next select the movement component and set its initial and max speed (1000 or more should work for now). Now go to the event graph and right click and search for event hit. Drag off event hit and search for destroy actor. Then connect the other actor pin from the event hit to the target on the destroy actor. This will result in the projectile destroying any actor it touches.\par
Next we will need to create a method to spawn the projectile. To do this open your cube character or pawn (the thing that you control, which im going to call character from here out). In the character go to the event graph and right click and search for the input event that you want (any key will do). Now drag off the input and search for spawn actor from class. set the class to that of your projectile. All thats left now is to set the spawn location and rotation. For location the simplest method will be to add a scene component to your character and place it where you want the projectile to spawn, this way it wont be overlapping your character when it spawns which would be bad (itd destroy your character). Then get the scene components world location and plug that into the spawn actor node (you may need to split the transform struct pin on the spawn actor node). For rotation just get your actors rotation and plug that into the spawn node. That should be all.\b\fs30\par
\par
Game Over Menu:\par
\b0\fs22 1 - In your player blueprint set the Health System similar to the enemy's, after the Destroy Actor function do the following:\par
\tab 1.1 - Call Create Widget function;\par
\tab 1.2 - Set the Class for your Game Over Screen Widget;\par
\tab 1.3 - Call View Port function, link the sequence and and Target from Create Widget function;\b\fs30\par
\tab\b0\fs22 1.4 - Call Set Show Mouse Cursor function, check the Show Mouse option and link the Target to a Get Player Controller function;\par
\tab 1.5 - Call Set Game Paused Function;\par
2 -In your Blueprint folder, right click, then User Interface, then Widget Blueprint, then do the following:\par
\tab 2.1 - Make the Screen as you wish, adding background and buttons;\par
\tab 2.2 - On the Event Graph add the Quit Game Button Variable, link it to a Quit Game function;\par
\tab 2.3 - Add the Retry Button Variable and link it to the Open Level Function, select the level you want to restart from and link it to a Show Mouse Cursor function, do not check the show mouse option, finally link it's target to a Get Player Controller function;\par
\tab 2.4 - Add the Return to Title Button Varaible, call a Romve from Parente function, link it to a Create New Widget function, select the Main Menu Widget for class and finally link it to a Add to Viewport functio;\par
\b\fs30\par
Game Start Menu:\par
\b0\fs22 1 - Create  a new map called Main Menu map;\par
2 - Open the level blueprint and do the following:\par
\tab 2.1 - Call Event BeginPlay;\par
\tab 2.2 - Call Create Main Menu Widget Function and set the Class for the Main Menu Widget (See Game Over Menu sectino for Widget Creation);\par
\tab 2.3 - Call Add Viewport Function and link it to the Create Main Menu Widget Function both for link and target;\par
\tab 2.4 - Call Set Input Mode UI Only Function and link it to the Add Viewport, also link player controller to Get Player Controller Function;\par
\tab 2.5 - Finally, call Set Show Mouse Cursor, link target to Get Player Controller Function and check the show mouse cursor checkbox;\par
 3 - For the Widget Menu do the following:\par
\tab 3.1 - Add a Canvas Panel and a WidgetSwitcher inside the Canvas;\par
\tab 3.2 - Inside the Widget Switcher add the buttons for the menu(Start, Quit and Credits);\par
\tab 3.3 -For the Start game do the following:\par
\tab\tab 3.3.1 - Call the On Clicked Event, link it to a Set Input Mode Game Only Function, link the controller to a Set Player Controller Function and lastly call the Open Level Function, set the level you want to start with;\par
\tab 3.4 - For the Credits do the following:\par
\tab\tab 3.4.1 -  On the Widget Switcher add another Canvas called Credits;\par
\tab\tab 3.4.2 - Inside the Credits Canvas add the credits texts and a button to go back to the main menu;\par
\tab\tab 3.4.3 - On the Graph, call the On Clicked Event for the Credits button and link it to a Set Active Widget Index Function, link the target to the Widget Switcher;\par
\tab\tab 3.4.4 - Call the On Clicked Event for the "Back to menu" button from the credits canvas and link it to another Set Active Widget Index Function, set it's index to 1 and link the target to the Widget Switcher;\par
\tab 3.5 - For the Quit Button just make the same way it was done on the Game Over Menu Section;\b\fs30\par
\par
\par
\par
\par
\par
\par
Notes - \par
\b0\fs22 - On Blueprints, Value functions represent the \b returned \b0 value from that function (the GET functions).\par
- In the Add Movement Function, the World Direction option is the multiplier of the input value from your key binding.\par
- For cameras that follows the player, select the palyer's bluepring on viewport mode, add the springarm and then the camera inside it.\par
- Yes, the capsule component is the only collision that will "block" movement. One way to do what you want is to add overlap collisions and disable movement/rotation at the input on overlap. Basically add a box collision in front of the horse. When that collision overlaps have it disable forward movement input. Same principle for all other movement.\par
- Branch function works like an "if" in coding.\par
\par
}
 